{"version":3,"sources":["components/FileUpload.jsx","client.js","App.js","serviceWorker.js","index.js"],"names":["Component","styled","div","currentYear","Date","getFullYear","yearRange","Array","from","length","_","i","year","Option","key","value","FieldData","file","this","data","name","updateYear","bind","FileUpload","isLoading","onUpload","testData","useState","fileData","setFileData","className","UploadOutlined","id","multiple","onChange","e","fileList","target","files","find","f","push","concat","type","dataSource","renderItem","align","allowClear","DeleteTwoTone","onClick","filter","item","removeFile","disabled","LoadingOutlined","spin","style","color","Object","keys","a","FormData","append","axios","post","then","res","catch","err","response","uploadFiles","App","setData","loading","loadingStatus","client","useEffect","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9f00380a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Divider, List, Row, Select, Space, Upload } from 'antd';\nimport { DeleteTwoTone, LoadingOutlined, UploadOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\n\n\nconst Component = styled.div`\n    background-color: white;\n    width: 50%;\n\n    input {\n        display: none;\n    }\n\n    .year-select {\n        min-width: 25%;\n    }\n\n    .year-select * {\n        cursor: pointer;\n    }\n`;\n\nconst currentYear = new Date().getFullYear();\nconst yearRange = Array.from({ length: 50 }, (_, i) => {\n    const year = currentYear - i;\n    return (\n        <Select.Option key={year} value={year}>\n            {year}\n        </Select.Option>\n    )\n});\n\nclass FieldData {\n    constructor(file) {\n        this.data = file;\n        this.name = file.name;\n        this.updateYear = this.updateYear.bind(this);\n    }\n\n    updateYear(year) {\n        this.year = year;\n    }\n}\n\nfunction FileUpload({ isLoading, onUpload, testData }) {\n    const [fileData, setFileData] = useState([]);\n    const selectFiles = e => {\n        let fileList = [];\n        for (const file of e.target.files) {\n            const data = new FieldData(file);\n            if (!fileData.find(f => f === data)){\n                fileList.push(data);\n            }\n        }\n        setFileData(fileData.concat(fileList));\n    }\n    \n    const removeFile = file => {\n        setFileData(fileData.filter(item => item !== file));\n    }\n\n    const submit = () => onUpload(fileData);\n\n    return (\n        <Component>\n            \n            <label className=\"ant-btn\">\n                <UploadOutlined />\n                Select File(s)\n                <input id=\"file-upload\" multiple onChange={selectFiles} type=\"file\"/> \n            </label>\n            <List\n                dataSource={fileData}\n                renderItem={file =>\n                    <Row align=\"middle\">\n                        <p>{file.name}</p>\n                        <Select allowClear className=\"year-select\" onChange={file.updateYear} value={file.year}>\n                            {yearRange}\n                        </Select>\n                        <DeleteTwoTone onClick={() => removeFile(file)}/>\n                    </Row>\n                }\n            />\n            <Button disabled={!fileData.length} onClick={submit}>Upload</Button>\n            <br/>\n            <br/>\n            {isLoading && <LoadingOutlined spin style={{ color: 'black' }}/>}\n            {testData &&\n            (<List\n                dataSource={Object.keys(testData)}\n                renderItem={year =>\n                    <>\n                        <Divider>{year || \"None\"}</Divider>\n                        <List\n                            dataSource={testData[year]}\n                            renderItem={item => \n                                <p>{item}</p>\n                            }\n                        />\n                    </>\n                }\n                />)\n            }\n        </Component>\n    );\n}\n\nexport default FileUpload;","import axios from 'axios';\n\nexport async function uploadFiles(files) {\n    const data = new FormData();\n    for(let i = 0; i < files.length; i++) {\n        data.append('file', files[i].data)\n        data.append('years', files[i].year || 0);\n    }\n    return axios\n        .post(\"http://localhost:8000/upload\", data, {})\n        .then(res => res.data)\n        .catch(err => err.response.data);\n}\n\nexport default {\n    uploadFiles\n}\n\n\n","import React, { useState, useEffect } from 'react';\nimport FileUpload from './components/FileUpload';\nimport \"antd/dist/antd.css\";\nimport axios from 'axios';\nimport client from './client';\n\n\nfunction App() {\n  const [data, setData] = useState();\n  const [loading, loadingStatus] = useState(false);\n  \n  async function uploadFiles(files) {\n    loadingStatus(true);\n    const res = await client.uploadFiles(files);\n    setData(res);\n  }\n\n  useEffect(() => {\n    if (data) {\n      loadingStatus(false);\n    }\n  }, [data]);\n\n  const error = data && data.error;\n\n  return (\n    <div className=\"app\">\n        <FileUpload testData={!error && data} isLoading={loading} onUpload={uploadFiles}/>\n        <p>{error}</p>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}